syntax = "proto3";

package api.v1;
// в ide preference->language and framework -> protocol buffers
// установить пути для third_party папки
import "google/annotations.proto";

// и для пакета путь, чтобы было автодополнение
// file:///~/go/pkg/mod/github.com/envoyproxy/protoc-gen-validate@v0.6.7
import "validate/validate.proto";
import "google/annotations_openapiv3.proto";

option go_package = "api/v1;v1";

option (openapi.v3.document) = {
  info: {
    title: "Osoc";
    version: "1.0.0";
    description: "osoc service"
  }
  components: {
    schemas: {
      additional_properties: [
        {
          name: "ErrorResponse"
          value: {
            schema: {
              type: "object"
              properties: {
                additional_properties: [
                  {
                    name: "code"
                    value: {
                      schema: {
                        type: "integer"
                        format: "uint64"
                      }
                    }
                  },
                  {
                    name: "message"
                    value: {
                      schema: {
                        type: "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  }
};

message AuthRequest {
  string first_name = 1;
  string password = 2;
}
message AuthOKResponse {
  string token = 1;
  string refreshToken = 2;
}
message RefreshRequest {
  string refreshToken = 1 [(validate.rules).string.min_len = 1];
}
message RefreshOkResponse {
  string token = 1;
  string refreshToken = 2;
}
message RegisterRequest {
  string first_name = 1;
  string last_name = 2;
  string password = 3;
  string sex = 4;
  int32 age = 5;
  string interests = 6;
}
message RegisterOkResponse {
  string token = 1;
  string refreshToken = 2;
}
service AuthService {
  rpc Authorization(AuthRequest) returns(AuthOKResponse){
    option (google.api.http) = {
      post: "/api.v1.AuthService/Authorization"
    };
  }
  rpc Registration(RegisterRequest) returns(RegisterOkResponse){
    option (google.api.http) = {
      post: "/api.v1.AuthService/Registration"
    };
  }
  rpc Refresh(RefreshRequest) returns(RefreshOkResponse){
    option (google.api.http) = {
      post: "/api.v1.AuthService/Refresh"
    };
  }
}
message User {
  uint64 id = 1;
  uint64 age = 2;
  string name = 3;
  string social = 4;
  int32 created_at = 5;
}

message UserRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
}

message UserCreateRequest {
  UserBody userBody = 2;
}

message UserUpdateRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
  UserBody userBody = 2;
}

message UserBody {
  uint64 age = 1;
  string name = 2;
  string social = 3;
  int32 created_at = 4;
}

message UserGetResponse {
  User user = 1;
}

message UserOkResponse {}

service UserService {
  rpc GetUser(UserRequest) returns(UserGetResponse){
    option (google.api.http) = {
      post: "/external/api.v1.UserService/GetUser/{id}"

    };
  }
  rpc CreateUser(UserCreateRequest) returns(UserOkResponse){
    option (google.api.http) = {
      post: "/external/api.v1.UserService/CreateUser"
      body: "userBody"
    };
  }
  rpc UpdateUser(UserUpdateRequest) returns(UserOkResponse){
    option (google.api.http) = {
      post: "/external/api.v1.UserService/UpdateUser/{id}"
      body: "userBody"
    };
  }
  rpc DeleteUser(UserRequest) returns(UserOkResponse){
    option (google.api.http) = {
      post: "/external/api.v1.UserService/DeleteUser/{id}"
    };
  }
}
